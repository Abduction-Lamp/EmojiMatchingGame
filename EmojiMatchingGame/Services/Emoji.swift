//
//  Emoji.swift
//  EmojiMatchingGame
//
//  Created by Vladimir Lesnykh on 07.07.2023.
//

import Foundation

protocol EmojiGeneratable {
    
    init(flag service: FlagGeneratable)
    func sequence(for level: Sizeable) -> [String]
}


fileprivate
let exception: [Int] = [
    0x02122,    /// ‚Ñ¢Ô∏è
    0x025AA,    /// ‚ñ™Ô∏è
    0x025AB,    /// ‚ñ´Ô∏è
    0x025FB,    /// ‚óªÔ∏è
    0x025FC,    /// ‚óºÔ∏è
    0x025FD,    /// ‚óΩÔ∏è
    0x025FE,    /// ‚óæÔ∏è
    0x02640,    /// ‚ôÄÔ∏è
    0x02642,    /// ‚ôÇÔ∏è
    0x0267E,    /// ‚ôæÔ∏è
    0x02714,    /// ‚úîÔ∏è
    0x02716,    /// ‚úñÔ∏è
    0x0274C,    /// ‚ùåÔ∏è
    0x02754,    /// ‚ùîÔ∏è
    0x02755,    /// ‚ùïÔ∏è
    0x02795,    /// ‚ûïÔ∏è
    0x02796,    /// ‚ûñÔ∏è
    0x02797,    /// ‚ûóÔ∏è
    0x027B0,    /// ‚û∞Ô∏è
    0x027BF,    /// ‚ûøÔ∏è
    0x02B1B,    /// ‚¨õÔ∏è
    0x02B1C,    /// ‚¨úÔ∏è
    0x03030,    /// „Ä∞Ô∏è
    0x1F3FB,    ///
    0x1F3FC,    ///
    0x1F3FD,    ///
    0x1F3FE,    ///
    0x1F3FF,    ///
    0x1F4AE,    /// üíÆÔ∏è
    0x1F4B1,    /// üí±Ô∏è
    0x1F4B2,    /// üí≤Ô∏è
    0x1F519,    /// üîôÔ∏è
    0x1F51A,    /// üîöÔ∏è
    0x1F51B,    /// üîõÔ∏è
    0x1F51C,    /// üîúÔ∏è
    0x1F51D,    /// üîùÔ∏è
    0x1F532,    /// üî≤Ô∏è
    0x1F533,    /// üî≥Ô∏è
    0x1F534,    /// üî¥Ô∏è
    0x1F535,    /// üîµÔ∏è
    0x1F536,    /// üî∂Ô∏è
    0x1F537,    /// üî∑Ô∏è
    0x1F538,    /// üî∏Ô∏è
    0x1F539,    /// üîπÔ∏è
    0x1F53A,    /// üî∫Ô∏è
    0x1F53B,    /// üîªÔ∏è
    0x1F7E0,    /// üü†Ô∏è
    0x1F7E1,    /// üü°Ô∏è
    0x1F7E2,    /// üü¢Ô∏è
    0x1F7E3,    /// üü£Ô∏è
    0x1F7E4,    /// üü§Ô∏è
    0x1F7E5,    /// üü•Ô∏è
    0x1F7E6,    /// üü¶Ô∏è
    0x1F7E7,    /// üüßÔ∏è
    0x1F7E8,    /// üü®Ô∏è
    0x1F7E9,    /// üü©Ô∏è
    0x1F7EA,    /// üü™Ô∏è
    0x1F7EB,    /// üü´Ô∏è
    0x1F7F0,    /// üü∞Ô∏è
    0x1F9B0,    /// ü¶∞Ô∏è
    0x1F9B1,    /// ü¶±Ô∏è
    0x1F9B2,    /// ü¶≤Ô∏è
    0x1F9B3,    /// ü¶≥Ô∏è
]


fileprivate
let ban: [Int] = []



final class Emoji: EmojiGeneratable {
    
    private let flag: FlagGeneratable
    private var list: [String] = []
    
    init(flag service: any FlagGeneratable = Flag()) {
        flag = service
        list.reserveCapacity(1500)
        search()
    }
    
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–æ–∫ –¥–ª—è —É—Ä–æ–≤–Ω—è –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.
    ///
    /// - Parameter level: –†–∞–∑–º–µ—Ä —É—Ä–æ–≤–Ω—è –∏–≥—Ä—ã, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª `Sizeable`.
    /// - Returns: –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö —Å–æ–±–æ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª—É—á–∞–π–Ω—ã—Ö emoji.
    ///
    /// –ï—Å–ª–∏ –≤ sequence –ø–æ–ø–∞–ª–∞ –±—É–∫–≤–∞, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π –∫–æ–¥–∏—Ä—É–µ—Ç—å—Å—è —Ñ–ª–∞–≥
    /// —Ç–æ –º–µ–Ω—è–µ–º —ç—Ç—É –±—É–∫–≤—É –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–ª–∞–≥
    ///
    func sequence(for level: any Sizeable) -> [String] {
        let count: Int = (level.size * level.size) / 2
        guard (count % 2) == 0 else { return [] }

        var sequence = list.shuffled(only: count).map { emoji in
            if let scalar = emoji.unicodeScalars.first?.value, flag.range.contains(scalar) {
                return flag.random()
            }
            return emoji
        }
        sequence += sequence
        return sequence.shuffled()
    }

    
    ///
    /// –°—Ä–µ–¥–∏ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ 0x01000 ... 0x1FFFF –∏—â–∏–º —Ç–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—å—Å—è emoji
    /// –°–æ –≤—Ä–µ–º–µ–Ω–µ–º, –ø–æ –º–µ—Ä–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö emoji, –¥–∏–∞–ø–æ–∑–æ–Ω –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è.
    /// –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —ç—Ç–æ—Ç –¥–∏–∞–ø–æ–∑–Ω –ø–æ–ø–∞–¥–∞—é—Ç –≤—Å–µ emoji
    ///
    /// –ü—Ä–∏ –ø–æ–∏—Å–∫–∏ –∏—Å–∫–ª—é—á–∞—é—Ç—å—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ emoji –∏–∑ —Å–ø–∏—Å–∫–∞ exception
    ///
    private func search(_ range: ClosedRange<Int> = 0x01000 ... 0x1FFFF) {
        let VS16: String = "\u{FE0F}"
        for scalar in range {
            if let unicode = UnicodeScalar(scalar) {
                if unicode.properties.isEmoji && !exception.contains(scalar) {
                    let emoji = "\(String(unicode))\(unicode.properties.isEmojiPresentation ? "" : VS16)"
                    list.append(emoji)
                }
            }
        }
    }
}
